{"cells":[{"cell_type":"markdown","metadata":{"id":"wNrKHhYi8jU4"},"source":["## **RNN Tutorial**\n","Reference: https://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html"]},{"cell_type":"markdown","metadata":{"id":"GPcequofBtla"},"source":["### **NLP From Scratch: Classifying Names with a Character-Level RNN**\n","Included in the ***data/names*** directory are 18 text files named as **[Language].txt**. Each file contains a bunch of names, one name per line, mostly romanized (but we still need to convert from Unicode to ASCII).\n","\n","We’ll end up with a dictionary of lists of names per language, **{language: [names ...]}**. The generic variables “category” and “line” (for language and name in our case) are used for later extensibility."]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2041,"status":"ok","timestamp":1713877519985,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"3HxJfzI2D0EA","outputId":"88fa097a-fc28-408f-b237-e4a4db5ae4dc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# Access Google Drive (Remove if you run your code locally)\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4617,"status":"ok","timestamp":1713877656306,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"HvVH-rEq8e4O","outputId":"d7dd97b0-ffae-4581-8974-30b999f0ec24"},"outputs":[{"name":"stdout","output_type":"stream","text":["['RNN_data/names/Czech.txt', 'RNN_data/names/German.txt', 'RNN_data/names/Arabic.txt', 'RNN_data/names/Japanese.txt', 'RNN_data/names/Chinese.txt', 'RNN_data/names/Vietnamese.txt', 'RNN_data/names/Russian.txt', 'RNN_data/names/French.txt', 'RNN_data/names/Irish.txt', 'RNN_data/names/English.txt', 'RNN_data/names/Spanish.txt', 'RNN_data/names/Greek.txt', 'RNN_data/names/Italian.txt', 'RNN_data/names/Portuguese.txt', 'RNN_data/names/Scottish.txt', 'RNN_data/names/Dutch.txt', 'RNN_data/names/Korean.txt', 'RNN_data/names/Polish.txt']\n"]}],"source":["from io import open\n","import glob\n","import os\n","\n","def findFiles(path): return glob.glob(path)\n","\n","print(findFiles('RNN_data/names/*.txt'))"]},{"cell_type":"code","execution_count":5,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Slusarski\n"]}],"source":["import unicodedata\n","import string\n","\n","all_letters = string.ascii_letters + \" .,;'\"\n","n_letters = len(all_letters)\n","\n","# Turn a Unicode string to plain ASCII\n","def unicodeToAscii(s):\n","    return ''.join(\n","        c for c in unicodedata.normalize('NFD', s)\n","        if unicodedata.category(c) != 'Mn'\n","        and c in all_letters\n","    )\n","\n","print(unicodeToAscii('Ślusàrski'))"]},{"cell_type":"code","execution_count":20,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,;'\n","57\n"]}],"source":["print(all_letters)\n","print(n_letters)"]},{"cell_type":"code","execution_count":6,"metadata":{},"outputs":[],"source":["# Build the category_lines dictionary, a list of names per language\n","category_lines = {}\n","all_categories = []\n","\n","# Read a file and split into lines\n","def readLines(filename):\n","    lines = open(filename, encoding='utf-8').read().strip().split('\\n')\n","    return [unicodeToAscii(line) for line in lines]\n","\n","for filename in findFiles('RNN_data/names/*.txt'):\n","    category = os.path.splitext(os.path.basename(filename))[0]\n","    all_categories.append(category)\n","    lines = readLines(filename)\n","    category_lines[category] = lines\n","\n","n_categories = len(all_categories)"]},{"cell_type":"markdown","metadata":{"id":"TNBWrvGJECng"},"source":["Now we have ***category_lines***, a dictionary mapping each category (language) to a list of lines (names). We also kept track of ***all_categories*** (just a list of languages) and ***n_categories*** for later reference.\n","\n"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1713880649658,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"5uTq4qN_8g1L","outputId":"6b539025-a102-43b6-e8cf-d2bef50c3fb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["dict_keys(['Czech', 'German', 'Arabic', 'Japanese', 'Chinese', 'Vietnamese', 'Russian', 'French', 'Irish', 'English', 'Spanish', 'Greek', 'Italian', 'Portuguese', 'Scottish', 'Dutch', 'Korean', 'Polish'])\n","_________________________\n","['Czech', 'German', 'Arabic', 'Japanese', 'Chinese', 'Vietnamese', 'Russian', 'French', 'Irish', 'English', 'Spanish', 'Greek', 'Italian', 'Portuguese', 'Scottish', 'Dutch', 'Korean', 'Polish']\n","_________________________\n","Number of languages: 18\n","_________________________\n","['Abandonato', 'Abatangelo', 'Abatantuono', 'Abate', 'Abategiovanni']\n"]}],"source":["print(category_lines.keys())\n","print('_________________________')\n","print(all_categories)\n","print('_________________________')\n","print('Number of languages:', n_categories)\n","print('_________________________')\n","print(category_lines['Italian'][:5])"]},{"cell_type":"markdown","metadata":{"id":"d1LbvfXlEhcW"},"source":["### **Turning names to Tensor**\n","Now that we have all the names organized, we need to turn them into Tensors to make any use of them.\n","\n","To represent a single letter, we use a “one-hot vector” of size **<1 X n_letters>**. A one-hot vector is filled with 0s except for a 1 at index of the current letter, e.g. **\"b\" = <0 1 0 0 0 ...>**.\n","\n","To make a word we join a bunch of those into a 2D matrix **<line_length X 1 X n_letters>**.\n","\n","That extra 1 dimension is because PyTorch assumes everything is in batches - we’re just using a batch size of 1 here."]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1713878371973,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"eaXli23g8g3v","outputId":"2e9e21f3-add5-42ed-84dc-f6297796ed9f"},"outputs":[{"name":"stdout","output_type":"stream","text":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0.]])\n","torch.Size([5, 1, 57])\n"]}],"source":["import torch\n","\n","# Find letter index from all_letters, e.g. \"a\" = 0\n","def letterToIndex(letter):\n","    return all_letters.find(letter)\n","\n","# Just for demonstration, turn a letter into a <1 x n_letters> Tensor\n","def letterToTensor(letter):\n","    tensor = torch.zeros(1, n_letters)\n","    tensor[0][letterToIndex(letter)] = 1\n","    return tensor\n","\n","# Turn a line into a <line_length x 1 x n_letters>,\n","# or an array of one-hot letter vectors\n","def lineToTensor(line):\n","    tensor = torch.zeros(len(line), 1, n_letters)\n","    for li, letter in enumerate(line):\n","        tensor[li][0][letterToIndex(letter)] = 1\n","    return tensor\n","\n","print(letterToTensor('J'))\n","\n","print(lineToTensor('Jones').size())"]},{"cell_type":"markdown","metadata":{"id":"eXC-0UlsH0lK"},"source":["### **Create the Network**\n","Before autograd, creating a recurrent neural network in Torch involved cloning the parameters of a layer over several timesteps. The layers held hidden state and gradients which are now entirely handled by the graph itself. This means you can implement a RNN in a very “pure” way, as regular feed-forward layers.\n","\n","This RNN module implements a “vanilla RNN” an is just 3 linear layers which operate on an input and hidden state, with a ***LogSoftmax*** layer after the output.\n","\n","\n","***logSoftmax:*** https://pytorch.org/docs/stable/generated/torch.nn.LogSoftmax.html"]},{"cell_type":"code","execution_count":80,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1713879193603,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"CyfpuOB9Hz91"},"outputs":[],"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","class RNN(nn.Module):\n","    def __init__(self, input_size, hidden_size, output_size):\n","        super(RNN, self).__init__()\n","\n","        self.hidden_size = hidden_size\n","\n","        self.i2h = nn.Linear(input_size, hidden_size)\n","        self.h2h = nn.Linear(hidden_size, hidden_size)\n","        self.h2o = nn.Linear(hidden_size, output_size)\n","        self.softmax = nn.LogSoftmax(dim=1)\n","\n","    def forward(self, input, hidden):\n","        hidden = F.tanh(self.i2h(input) + self.h2h(hidden))\n","        output = self.h2o(hidden)\n","        output = self.softmax(output)\n","        return output, hidden\n","\n","    def initHidden(self):\n","        return torch.zeros(1, self.hidden_size)\n","\n","n_hidden = 128\n","rnn = RNN(n_letters, n_hidden, n_categories).to(device)"]},{"cell_type":"markdown","metadata":{"id":"NBSozux7NlUC"},"source":["To run a step of this network we need to pass an input (in our case, the Tensor for the current letter) and a previous hidden state (which we initialize as zeros at first). We’ll get back the output (probability of each language) and a next hidden state (which we keep for the next step)."]},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1713880079933,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"UEJeOHZI8g6Y"},"outputs":[],"source":["input = letterToTensor('A')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output, next_hidden = rnn(input, hidden)"]},{"cell_type":"markdown","metadata":{"id":"eR0fT3V9OcsQ"},"source":["For the sake of efficiency we don’t want to be creating a new Tensor for every step, so we will use ***lineToTensor*** instead of ***letterToTensor*** and use slices. This could be further optimized by precomputing batches of Tensors.\n"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1713880316003,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"avQ4wVF-8g9N","outputId":"1fd0791c-fe8f-4feb-a117-5b003f92c9f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["torch.Size([6, 1, 57])\n","----------------------------------\n","tensor([[-3.0264, -2.8750, -2.9250, -2.9578, -2.8501, -2.7619, -2.9462, -2.7620,\n","         -2.8494, -2.7910, -2.8468, -2.8643, -2.9348, -2.8878, -2.8326, -2.9387,\n","         -3.0088, -3.0261]], grad_fn=<LogSoftmaxBackward0>)\n","length of output: torch.Size([1, 18])\n"]}],"source":["input = lineToTensor('Albert')\n","hidden = torch.zeros(1, n_hidden)\n","\n","print(input.shape)\n","print('----------------------------------')\n","\n","output, next_hidden = rnn(input[0], hidden)\n","print(output)\n","print('length of output:', output.size())"]},{"cell_type":"markdown","metadata":{"id":"HoWEM4vFPgrr"},"source":["As you can see the output is a **<1 X n_categories>** Tensor, where every item is the likelihood of that category (higher is more likely).\n"]},{"cell_type":"markdown","metadata":{"id":"aMni5svMP41l"},"source":["### **Preparing for Training**\n","Before going into training we should make a few helper functions. The first is to interpret the output of the network, which we know to be a likelihood of each category. We can use ***Tensor.topk*** to get the index of the greatest value:"]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":249,"status":"ok","timestamp":1713880705463,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"kATWtPi58g_1","outputId":"9dfe5e1f-5dbd-4384-af5c-1fc5ceb2c6fe"},"outputs":[{"name":"stdout","output_type":"stream","text":["('Vietnamese', 5)\n"]}],"source":["def categoryFromOutput(output):\n","    top_n, top_i = output.topk(1)\n","    category_i = top_i[0].item()\n","    return all_categories[category_i], category_i\n","\n","print(categoryFromOutput(output))"]},{"cell_type":"markdown","metadata":{"id":"3rfC42vHQJo0"},"source":["We will also want a quick way to get a training example (a name and its language):"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1713880742140,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"_QYFFiGn8hCr","outputId":"357185a5-4761-4463-bc8e-f0a5651b68a7"},"outputs":[{"name":"stdout","output_type":"stream","text":["category = Russian , line = Balasanyan\n","category = Czech , line = Chermak\n","category = French , line = Brisbois\n","category = German , line = Herbert\n","category = English , line = Gunston\n","category = Japanese , line = Enomoto\n","category = Japanese , line = Yamanoue\n","category = Chinese , line = Wei\n","category = Portuguese , line = Esteves\n","category = Arabic , line = Shadid\n"]}],"source":["import random\n","\n","def randomChoice(l):\n","    return l[random.randint(0, len(l) - 1)]\n","\n","def randomTrainingExample():\n","    category = randomChoice(all_categories)\n","    line = randomChoice(category_lines[category])\n","    category_tensor = torch.tensor([all_categories.index(category)], dtype=torch.long)\n","    line_tensor = lineToTensor(line)\n","    return category, line, category_tensor, line_tensor\n","\n","for i in range(10):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    print('category =', category, ', line =', line)"]},{"cell_type":"markdown","metadata":{"id":"hWlOSdIBQQIS"},"source":["### **Training the Network**\n","Now all it takes to train this network is show it a bunch of examples, have it make guesses, and tell it if it’s wrong.\n","\n","For the loss function ***nn.NLLLoss*** is appropriate, since the last layer of the RNN is ***nn.LogSoftmax***."]},{"cell_type":"code","execution_count":102,"metadata":{"executionInfo":{"elapsed":257,"status":"ok","timestamp":1713880791681,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"UiwH2CJOQLOx"},"outputs":[],"source":["rnn = RNN(n_letters, n_hidden, n_categories).to(device)\n","criterion = nn.NLLLoss().to(device)\n","optimizer = torch.optim.Adam(rnn.parameters(), lr=0.001)"]},{"cell_type":"markdown","metadata":{"id":"hXFALggkQj3F"},"source":["Each loop of training will:\n","\n","1. Create input and target tensors\n","\n","2. Create a zeroed initial hidden state\n","\n","3. Read each letter in and Keep hidden state for next letter\n","\n","5. Compare final output to target\n","\n","6. Back-propagate\n","\n","7. Return the output and loss"]},{"cell_type":"code","execution_count":97,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1713880892412,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"In7HfgXZQV-p"},"outputs":[],"source":["learning_rate = 0.005\n","\n","def train(category_tensor, line_tensor):\n","    hidden = rnn.initHidden()\n","\n","    rnn.zero_grad()\n","\n","    for i in range(line_tensor.size()[0]): # Iterate through the length of the word\n","        output, hidden = rnn(line_tensor[i], hidden)\n","\n","    loss = criterion(output, category_tensor)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    return output, loss.item()"]},{"cell_type":"code","execution_count":98,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["category: Polish\n","output: tensor([[-6.7371e+00, -9.3688e+00, -1.9530e+01, -8.0443e+00, -1.4600e+01,\n","         -2.2230e+01, -8.1988e+00, -1.4598e+01, -1.6955e+01, -1.0574e+01,\n","         -1.1353e+01, -1.3651e+01, -6.5084e+00, -1.7614e+01, -1.7420e+01,\n","         -9.4490e+00, -1.3319e+01, -3.4843e-03]],\n","       grad_fn=<LogSoftmaxBackward0>)\n","category from output: ('Polish', 17)\n","loss: 0.0034842516761273146\n"]}],"source":["category, line, category_tensor, line_tensor = randomTrainingExample()\n","output, loss = train(category_tensor, line_tensor)\n","print('category:', category)\n","print('output:', output)\n","print('category from output:', categoryFromOutput(output))\n","print('loss:', loss)"]},{"cell_type":"markdown","metadata":{"id":"61Pj16-GSxhO"},"source":["Now we just have to run that with a bunch of examples. Since the train function returns both the output and loss we can print its guesses and also keep track of loss for plotting. Since there are 1000s of examples we print only every print_every examples, and take an average of the loss."]},{"cell_type":"code","execution_count":103,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":193216,"status":"ok","timestamp":1713881626512,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"ctnnuQ4oQWAr","outputId":"6a511e2e-0b3e-4680-8a51-6e832ec378f0"},"outputs":[{"name":"stdout","output_type":"stream","text":["5000 5% (0m 3s) 1.7221 Dupont / English ✗ (French)\n","10000 10% (0m 6s) 1.5225 Si / Japanese ✗ (Korean)\n","15000 15% (0m 10s) 2.0474 Gordon / English ✗ (Scottish)\n","20000 20% (0m 13s) 0.7018 Bursinos / Greek ✓\n","25000 25% (0m 16s) 1.3925 Gallchobhar / English ✗ (Irish)\n","30000 30% (0m 20s) 0.2420 Lao / Chinese ✓\n","35000 35% (0m 23s) 2.9113 Tuev / Vietnamese ✗ (Russian)\n","40000 40% (0m 26s) 0.0548 Hoang / Vietnamese ✓\n","45000 45% (0m 30s) 0.4022 Ross / Scottish ✓\n","50000 50% (0m 33s) 0.0110 Cleirich / Irish ✓\n","55000 55% (0m 36s) 5.5341 Martin / French ✗ (German)\n","60000 60% (0m 40s) 0.0029 Imagawa / Japanese ✓\n","65000 65% (0m 44s) 0.0188 Lim  / Korean ✓\n","70000 70% (0m 47s) 1.1284 Zeman / Czech ✓\n","75000 75% (0m 51s) 0.0228 Cameron / Scottish ✓\n","80000 80% (0m 54s) 1.9577 Duval / Irish ✗ (French)\n","85000 85% (0m 57s) 2.2282 TsannKaySi / Japanese ✗ (Russian)\n","90000 90% (1m 1s) 0.0134 Nguyen / Vietnamese ✓\n","95000 95% (1m 4s) 1.2545 Roldan / Spanish ✓\n","100000 100% (1m 7s) 4.9177 Tchanturia / Spanish ✗ (Russian)\n"]}],"source":["import time\n","import math\n","\n","n_iters = 100000\n","print_every = 5000\n","plot_every = 1000\n","\n","# Keep track of losses for plotting\n","current_loss = 0\n","all_losses = []\n","\n","def timeSince(since):\n","    now = time.time()\n","    s = now - since\n","    m = math.floor(s / 60)\n","    s -= m * 60\n","    return '%dm %ds' % (m, s)\n","\n","start = time.time()\n","\n","for iter in range(1, n_iters + 1):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    output, loss = train(category_tensor, line_tensor)\n","    current_loss += loss\n","\n","    # Print ``iter`` number, loss, name and guess\n","    if iter % print_every == 0:\n","        guess, guess_i = categoryFromOutput(output)\n","        correct = '✓' if guess == category else '✗ (%s)' % category\n","        print('%d %d%% (%s) %.4f %s / %s %s' % (iter, iter / n_iters * 100, timeSince(start), loss, line, guess, correct))\n","\n","    # Add current loss avg to list of losses\n","    if iter % plot_every == 0:\n","        all_losses.append(current_loss / plot_every)\n","        current_loss = 0"]},{"cell_type":"markdown","metadata":{"id":"zStZZrZGTiQU"},"source":["### **Ploting the results**\n","Plotting the historical loss from ***all_losses*** shows the network learning:"]},{"cell_type":"code","execution_count":104,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":1272,"status":"ok","timestamp":1713881652039,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"pHku92EKQWCu","outputId":"1e85ec67-2d13-42cd-8818-15e73604460a"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x15ed7fd60>]"]},"execution_count":104,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","plt.figure()\n","plt.plot(all_losses)"]},{"cell_type":"markdown","metadata":{"id":"KeQIUX2cTsx8"},"source":["## **Evaluating the Results**\n","To see how well the network performs on different categories, we will create a confusion matrix, indicating for every actual language (rows) which language the network guesses (columns). To calculate the confusion matrix a bunch of samples are run through the network with ***evaluate()***, which is the same as ***train()*** minus the backprop.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"47eQzbAgUbLA"},"source":["### **Running on User Input**"]},{"cell_type":"code","execution_count":90,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":354,"status":"ok","timestamp":1713881870339,"user":{"displayName":"Jinbin CAI","userId":"05218570907633637087"},"user_tz":-480},"id":"m4FFqpyNT6JX","outputId":"1f794efc-3c6e-4e4e-c056-42ae84a576d1"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","> Bran\n","(-1.70) Chinese ✗ (Irish)\n","(-1.82) Irish ✓\n","(-1.89) English ✗ (Irish)\n","\n","> Ba\n","(-0.40) Arabic ✓\n","(-1.56) Korean ✗ (Arabic)\n","(-3.45) Portuguese ✗ (Arabic)\n","\n","> Rodagh\n","(-0.63) Irish ✓\n","(-0.97) English ✗ (Irish)\n","(-3.33) Dutch ✗ (Irish)\n"]}],"source":["# Just return an output given a line\n","def evaluate(line_tensor):\n","    hidden = rnn.initHidden()\n","\n","    for i in range(line_tensor.size()[0]):\n","        output, hidden = rnn(line_tensor[i], hidden)\n","\n","    return output\n","\n","def predict(n_predictions=3):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    print('\\n> %s' % line)\n","    with torch.no_grad():\n","        output = evaluate(lineToTensor(line))\n","\n","        # Get top N categories\n","        topv, topi = output.topk(n_predictions, 1, True)\n","        predictions = []\n","\n","        for i in range(n_predictions):\n","            value = topv[0][i].item()\n","            category_index = topi[0][i].item()\n","            correct = '✓' if category_index == all_categories.index(category) else '✗ (%s)' % category\n","            print('(%.2f) %s' % (value, all_categories[category_index]), correct)\n","            predictions.append([value, all_categories[category_index]])\n","\n","predict()\n","predict()\n","predict()"]},{"cell_type":"markdown","metadata":{},"source":["### **LSTM**"]},{"cell_type":"code","execution_count":131,"metadata":{},"outputs":[],"source":["class LSTM(nn.Module):\n","    def __init__(self, input_size, hidden_size, output_size):\n","        super(LSTM, self).__init__()\n","\n","        self.hidden_size = hidden_size\n","\n","        self.lstm = nn.LSTM(input_size, hidden_size)\n","        self.h2o = nn.Linear(hidden_size, output_size)\n","        self.softmax = nn.LogSoftmax(dim=1)\n","\n","    def forward(self, input, hidden):\n","        output, (hn, cn) = self.lstm(input, hidden)\n","        output = self.h2o(output)\n","        output = self.softmax(output)\n","        return output, (hn, cn)\n","\n","    def initHidden(self):\n","        return torch.zeros(1, self.hidden_size), torch.zeros(1, self.hidden_size)"]},{"cell_type":"code","execution_count":132,"metadata":{},"outputs":[],"source":["lstm = LSTM(n_letters, n_hidden, n_categories).to(device)\n","loss_function = nn.NLLLoss().to(device)\n","optimizer = torch.optim.Adam(lstm.parameters(), lr=0.001)"]},{"cell_type":"code","execution_count":133,"metadata":{},"outputs":[],"source":["def train_with_lstm(category_tensor, line_tensor):\n","    hn, cn = lstm.initHidden()\n","\n","    lstm.zero_grad()\n","\n","    for i in range(line_tensor.size()[0]): # Iterate through the length of the word\n","        output, (hn, cn) = lstm(line_tensor[i], (hn, cn))\n","\n","    loss = criterion(output, category_tensor)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    return output, loss.item()"]},{"cell_type":"code","execution_count":134,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["5000 5% (0m 9s) 2.8111 Whalen / German ✗ (Irish)\n","10000 10% (0m 19s) 5.4983 Fabr / Arabic ✗ (Russian)\n","15000 15% (0m 28s) 0.5647 Mendes / Portuguese ✓\n","20000 20% (0m 37s) 1.4904 Gourlay / Scottish ✗ (English)\n","25000 25% (0m 47s) 0.0503 Gomolka / Polish ✓\n","30000 30% (0m 57s) 0.5110 Bell / Scottish ✓\n","35000 35% (1m 6s) 0.0026 Demishev / Russian ✓\n","40000 40% (1m 15s) 3.7741 Buggenum / English ✗ (Dutch)\n","45000 45% (1m 25s) 0.0372 Luo / Chinese ✓\n","50000 50% (1m 34s) 2.3902 Delaney / Irish ✗ (English)\n","55000 55% (1m 43s) 0.0231 Slezak / Czech ✓\n","60000 60% (1m 52s) 0.0134 Baik / Korean ✓\n","65000 65% (2m 1s) 0.0541 Guo / Chinese ✓\n","70000 70% (2m 11s) 0.0001 Ivanov / Russian ✓\n","75000 75% (2m 20s) 1.4627 Rosario / Japanese ✗ (Portuguese)\n","80000 80% (2m 29s) 0.0167 Johnston / Scottish ✓\n","85000 85% (2m 38s) 0.0001 Chrysanthopoulos / Greek ✓\n","90000 90% (2m 48s) 0.1063 Oleastro / Spanish ✓\n","95000 95% (2m 57s) 0.2816 Waldfogel / German ✓\n","100000 100% (3m 6s) 0.0001 Patselas / Greek ✓\n"]}],"source":["import time\n","import math\n","\n","n_iters = 100000\n","print_every = 5000\n","plot_every = 1000\n","\n","# Keep track of losses for plotting\n","current_loss = 0\n","all_losses = []\n","\n","def timeSince(since):\n","    now = time.time()\n","    s = now - since\n","    m = math.floor(s / 60)\n","    s -= m * 60\n","    return '%dm %ds' % (m, s)\n","\n","start = time.time()\n","\n","for iter in range(1, n_iters + 1):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    output, loss = train_with_lstm(category_tensor, line_tensor)\n","    current_loss += loss\n","\n","    # Print ``iter`` number, loss, name and guess\n","    if iter % print_every == 0:\n","        guess, guess_i = categoryFromOutput(output)\n","        correct = '✓' if guess == category else '✗ (%s)' % category\n","        print('%d %d%% (%s) %.4f %s / %s %s' % (iter, iter / n_iters * 100, timeSince(start), loss, line, guess, correct))\n","\n","    # Add current loss avg to list of losses\n","    if iter % plot_every == 0:\n","        all_losses.append(current_loss / plot_every)\n","        current_loss = 0"]},{"cell_type":"code","execution_count":135,"metadata":{},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x1699861f0>]"]},"execution_count":135,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.figure()\n","plt.plot(all_losses)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOTjz8I8E8mAtzqv1XI6kqp","mount_file_id":"1sQO56i2acpxvhXNWUQKWN1asm7vIi328","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.18"}},"nbformat":4,"nbformat_minor":0}
